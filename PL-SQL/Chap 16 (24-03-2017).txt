SQL> CREATE OR REPLACE PACKAGE error_pkg IS
  2    e_fk_err	     EXCEPTION;
  3    e_seq_nbr_err	EXCEPTION;
  4    PRAGMA EXCEPTION_INIT (e_fk_err, -2292);
  5    PRAGMA EXCEPTION_INIT (e_seq_nbr_err, -2277);
  6    -- Partial code.
  7  END error_pkg;
  8  /

Package created.

SQL> declare
  2  i number:=10;
  3  begin
  4  if i>=10 then
  5  raise error_pkg.e_fk_err;
  6  end if
  7  exception
  8  when error_pkg.e_fk_err then
  9  dbms_output.put_line(sqlerrm);
 10  end;
 11  /
exception
*
ERROR at line 7:
ORA-06550: line 7, column 1: 
PLS-00103: Encountered the symbol "EXCEPTION" when expecting one of the following: 
; 
The symbol ";" was substituted for "EXCEPTION" to continue. 


SQL> ed
Wrote file afiedt.buf

  1  declare
  2  i number:=10;
  3  begin
  4  if i>=10 then
  5  raise error_pkg.e_fk_err;
  6  end if;
  7  exception
  8  when error_pkg.e_fk_err then
  9  dbms_output.put_line(sqlerrm);
 10* end;
SQL> /
ORA-02292: integrity constraint (.) violated - child record found                                                                                                                                                                                                                                           

PL/SQL procedure successfully completed.

SQL> ed
Wrote file afiedt.buf

  1  declare
  2  i number:=10;
  3  begin
  4  if i>=10 then
  5  raise error_pkg.e_seq_nbr_err;
  6  end if;
  7  exception
  8  when error_pkg.e_seq_nbr_err then
  9  dbms_output.put_line(sqlerrm);
 10* end;
SQL> /
ORA-02277: invalid sequence name                                                                                                                                                                                                                                                                            

PL/SQL procedure successfully completed.

SQL> ed
Wrote file afiedt.buf

  1  declare
  2  i number:=10;
  3  begin
  4  if i>=10 then
  5  raise error_pkg.e_seq_nbr_err;
  6  end if;
  7  exception
  8  when error_pkg.e_seq_nbr_err then
  9  dbms_output.put_line(sqlerrm);
 10  dbms_output.put_line(sqlcode);
 11* end;
SQL> /
ORA-02277: invalid sequence name                                                                                                                                                                                                                                                                            
-2277                                                                                                                                                                                                                                                                                                       

PL/SQL procedure successfully completed.

SQL> CREATE OR REPLACE PACKAGE constant_pkg IS
  2    c_order_received CONSTANT VARCHAR(2) := 'OR';
  3    c_order_shipped  CONSTANT VARCHAR(2) := 'OS';
  4    c_min_sal        CONSTANT NUMBER(3)  := 900;
  5  END constant_pkg;
  6  /

Package created.

SQL> 
SQL> BEGIN
  2    UPDATE employees
  3       SET salary  = salary + 200
  4    WHERE salary <= constant_pkg.c_min_sal;
  5  END;
  6  /

PL/SQL procedure successfully completed.

SQL> exit
SQL> set lines 300
SQL> set pages 20
SQL> set serveroutput on
SQL> SET SERVEROUTPUT ON
SQL> 
SQL> CREATE OR REPLACE PROCEDURE employee_sal(p_id NUMBER) IS
  2     v_emp employees%ROWTYPE;
  3     FUNCTION tax(p_salary VARCHAR2) RETURN NUMBER IS
  4     BEGIN
  5       RETURN p_salary * 0.825;
  6     END tax;
  7  BEGIN
  8     SELECT * INTO v_emp
  9     FROM EMPLOYEES WHERE employee_id = p_id;
 10     DBMS_OUTPUT.PUT_LINE('Tax: '||tax(v_emp.salary));
 11  END;
 12  /

Procedure created.

SQL> EXECUTE employee_sal(100);
Tax: 4902.1665                                                                                                                                                                                                                                                                                              

PL/SQL procedure successfully completed.

SQL> CREATE OR REPLACE PROCEDURE add_dept(
  2    p_id NUMBER, p_name VARCHAR2) AUTHID CURRENT_USER IS
  3  BEGIN
  4    INSERT INTO departments
  5    VALUES (p_id, p_name, NULL, NULL);
  6  END;
  7  /

Procedure created.

SQL> execute add_dept(1001,'reserch');

PL/SQL procedure successfully completed.

SQL> select * from departments where department_id=1001;

DEPARTMENT_ID DEPARTMENT_NAME                MANAGER_ID LOCATION_ID                                                                                                                                                                                                                                         
------------- ------------------------------ ---------- -----------                                                                                                                                                                                                                                         
         1001 reserch                                                                                                                                                                                                                                                                                       

SQL> desc usage;
 Name                                                                                                                                                                          Null?    Type
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- -------- --------------------------------------------------------------------------------------------------------------------
 CARD_ID                                                                                                                                                                                NUMBER
 LOC                                                                                                                                                                                    NUMBER

SQL> select * from usage;

   CARD_ID        LOC                                                                                                                                                                                                                                                                                       
---------- ----------                                                                                                                                                                                                                                                                                       
        50       2000                                                                                                                                                                                                                                                                                       
        50       2000                                                                                                                                                                                                                                                                                       
        50       2000                                                                                                                                                                                                                                                                                       

SQL> truncate table usage;

Table truncated.

SQL> desc txn
 Name                                                                                                                                                                          Null?    Type
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- -------- --------------------------------------------------------------------------------------------------------------------
 ACC_ID                                                                                                                                                                        NOT NULL NUMBER
 AMOUNT                                                                                                                                                                                 NUMBER

SQL> truncate table txn;

Table truncated.

SQL> CREATE OR REPLACE PROCEDURE log_usage (p_card_id NUMBER, p_loc NUMBER) IS
  2    PRAGMA AUTONOMOUS_TRANSACTION;
  3  BEGIN
  4    INSERT INTO usage
  5    VALUES (p_card_id, p_loc);
  6    COMMIT;
  7  END log_usage;
  8  /

Procedure created.

SQL> CREATE OR REPLACE PROCEDURE bank_trans(p_cardnbr NUMBER,p_loc NUMBER) IS
  2  BEGIN
  3     INSERT INTO txn VALUES (9001, 1000);
  4     log_usage (p_cardnbr, p_loc);
  5  END bank_trans;
  6  /

Procedure created.

SQL> EXECUTE bank_trans(50, 2000);

PL/SQL procedure successfully completed.

SQL> select * from usage;

   CARD_ID        LOC                                                                                                                                                                                                                                                                                       
---------- ----------                                                                                                                                                                                                                                                                                       
        50       2000                                                                                                                                                                                                                                                                                       

SQL> select * from txn;

    ACC_ID     AMOUNT                                                                                                                                                                                                                                                                                       
---------- ----------                                                                                                                                                                                                                                                                                       
      9001       1000                                                                                                                                                                                                                                                                                       

SQL> rollback;

Rollback complete.

SQL> select * from usage;

   CARD_ID        LOC                                                                                                                                                                                                                                                                                       
---------- ----------                                                                                                                                                                                                                                                                                       
        50       2000                                                                                                                                                                                                                                                                                       

SQL> select * from txn;

no rows selected

SQL> CREATE OR REPLACE PROCEDURE log_usage (p_card_id NUMBER, p_loc NUMBER) IS
  2    PRAGMA AUTONOMOUS_TRANSACTION;
  3  BEGIN
  4    INSERT INTO usage
  5    VALUES (p_card_id, p_loc);
  6    COMMIT;
  7  END log_usage;
  8  /

Procedure created.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE bank_trans(p_cardnbr NUMBER,p_loc NUMBER) IS
  2  BEGIN
  3     INSERT INTO txn VALUES (9001, 1000);
  4     log_usage (p_cardnbr, p_loc);
  5  END bank_trans;
  6  /

Procedure created.

SQL> CREATE OR REPLACE PROCEDURE log_usage (p_card_id NUMBER, p_loc NUMBER) IS
  2    PRAGMA AUTONOMOUS_TRANSACTION;
  3  BEGIN
  4    INSERT INTO usage
  5    VALUES (p_card_id, p_loc);
  6    COMMIT;
  7  END log_usage;
  8  /

Procedure created.

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE log_usage (p_card_id NUMBER, p_loc NUMBER) IS
  2    PRAGMA AUTONOMOUS_TRANSACTION;
  3  BEGIN
  4    INSERT INTO usage
  5    VALUES (p_card_id, p_loc);
  6    rollback;
  7* END log_usage;
SQL> truncate table usage;

Table truncated.

SQL> truncate table txn;

Table truncated.

SQL> execute bank_trans(50,2000);

PL/SQL procedure successfully completed.

SQL> select * from usage;

   CARD_ID        LOC                                                                                                                                                                                                                                                                                       
---------- ----------                                                                                                                                                                                                                                                                                       
        50       2000                                                                                                                                                                                                                                                                                       

SQL> select * from txn;

    ACC_ID     AMOUNT                                                                                                                                                                                                                                                                                       
---------- ----------                                                                                                                                                                                                                                                                                       
      9001       1000                                                                                                                                                                                                                                                                                       

SQL> CREATE OR REPLACE PROCEDURE log_usage (p_card_id NUMBER, p_loc NUMBER) IS
  2    PRAGMA AUTONOMOUS_TRANSACTION;
  3  BEGIN
  4    INSERT INTO usage
  5    VALUES (p_card_id, p_loc);
  6    COMMIT;
  7  END log_usage;
  8  /

Procedure created.

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE log_usage (p_card_id NUMBER, p_loc NUMBER) IS
  2    PRAGMA AUTONOMOUS_TRANSACTION;
  3  BEGIN
  4    INSERT INTO usage
  5    VALUES (p_card_id, p_loc);
  6    rollback;
  7* END log_usage;
SQL> /

Procedure created.

SQL> CREATE OR REPLACE PROCEDURE bank_trans(p_cardnbr NUMBER,p_loc NUMBER) IS
  2  BEGIN
  3     INSERT INTO txn VALUES (9001, 1000);
  4     log_usage (p_cardnbr, p_loc);
  5  END bank_trans;
  6  /

Procedure created.

SQL> truncate table txn;

Table truncated.

SQL> truncate table usage;

Table truncated.

SQL> execute bank_trans(50,2000);

PL/SQL procedure successfully completed.

SQL> select * from usage;

no rows selected

SQL> select * from txn;

    ACC_ID     AMOUNT                                                                                                                                                                                                                                                                                       
---------- ----------                                                                                                                                                                                                                                                                                       
      9001       1000                                                                                                                                                                                                                                                                                       

SQL> CREATE OR REPLACE PROCEDURE log_usage (p_card_id NUMBER, p_loc NUMBER) IS
  2    PRAGMA AUTONOMOUS_TRANSACTION;
  3  BEGIN
  4    INSERT INTO usage
  5    VALUES (p_card_id, p_loc);
  6    COMMIT;
  7  END log_usage;
  8  /

Procedure created.

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE log_usage (p_card_id NUMBER, p_loc NUMBER) IS
  2    PRAGMA AUTONOMOUS_TRANSACTION;
  3  BEGIN
  4    INSERT INTO usage
  5    VALUES (p_card_id, p_loc);
  6* END log_usage;
  7  /

Procedure created.

SQL> CREATE OR REPLACE PROCEDURE bank_trans(p_cardnbr NUMBER,p_loc NUMBER) IS
  2  BEGIN
  3     INSERT INTO txn VALUES (9001, 1000);
  4     log_usage (p_cardnbr, p_loc);
  5  END bank_trans;
  6  /

Procedure created.

SQL> EXECUTE bank_trans(50, 2000)
BEGIN bank_trans(50, 2000); END;

*
ERROR at line 1:
ORA-00001: unique constraint (HR.PK11) violated 
ORA-06512: at "HR.BANK_TRANS", line 3 
ORA-06512: at line 1 


SQL> desc usage;
 Name                                                                                                                                                                          Null?    Type
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- -------- --------------------------------------------------------------------------------------------------------------------
 CARD_ID                                                                                                                                                                                NUMBER
 LOC                                                                                                                                                                                    NUMBER

SQL> truncate table txn;

Table truncated.

SQL> truncate table usage;

Table truncated.

SQL> execute bank_trans(50,2000);
BEGIN bank_trans(50,2000); END;

*
ERROR at line 1:
ORA-06519: active autonomous transaction detected and rolled back 
ORA-06512: at "HR.LOG_USAGE", line 6 
ORA-06512: at "HR.BANK_TRANS", line 4 
ORA-06512: at line 1 


SQL> exit
SQL> set lines 300
SQL> set pages 20
SQL> CREATE OR REPLACE PROCEDURE update_salary(p_emp_id NUMBER) IS
  2    v_name    employees.last_name%TYPE;
  3    v_new_sal employees.salary%TYPE;
  4  BEGIN
  5    UPDATE employees
  6      SET salary = salary * 1.1
  7    WHERE employee_id = p_emp_id
  8    RETURNING last_name, salary INTO v_name, v_new_sal;
  9  DBMS_OUTPUT.PUT_LINE(v_name || ' new salary is ' || v_new_sal);
 10  END update_salary;
 11  /

Procedure created.

SQL> 
SQL> SET SERVEROUTPUT ON
SQL> EXECUTE update_salary(108);
Greenberg new salary is 21272.91                                                                                                                                                                                                                                                                            

PL/SQL procedure successfully completed.

SQL> ALTER TRIGGER update_job_history DISABLE;

Trigger altered.

SQL> ALTER TRIGGER check_salary_trg DISBALE;
ALTER TRIGGER check_salary_trg DISBALE
                               *
ERROR at line 1:
ORA-00922: missing or invalid option 


SQL> ALTER TRIGGER update_job_history DISABLE;

Trigger altered.

SQL> ALTER TRIGGER check_salary_trg DISABLE;
ALTER TRIGGER check_salary_trg DISABLE
*
ERROR at line 1:
ORA-04080: trigger 'CHECK_SALARY_TRG' does not exist 


SQL> -- Disable the update_job_history trigger as follows (if not already disabled):
SQL> -- ALTER TRIGGER update_job_history DISABLE;
SQL> 
SQL> CREATE OR REPLACE PROCEDURE raise_salary(p_percent NUMBER) IS
  2    TYPE numlist_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  3    v_id  numlist_type;
  4  BEGIN
  5   v_id(1) := 100; v_id(2) := 102; v_id(3) := 104; v_id(4) := 110;
  6  
  7   -- bulk-bind the PL/SQL table
  8    FORALL i IN v_id.FIRST .. v_id.LAST
  9      UPDATE employees
 10        SET salary = (1 + p_percent/100) * salary
 11        WHERE employee_id = v_id(i);
 12  END;
 13  /

Procedure created.

SQL> 
SQL> 
SQL> select employee_id,salary from employees where employee_id in(100,102,104,110);

EMPLOYEE_ID     SALARY                                                                                                                                                                                                                                                                                      
----------- ----------                                                                                                                                                                                                                                                                                      
        100    5942.02                                                                                                                                                                                                                                                                                      
        102    3162.24                                                                                                                                                                                                                                                                                      
        104    1370.18                                                                                                                                                                                                                                                                                      
        110   15253.14                                                                                                                                                                                                                                                                                      

SQL> execute raise_salary(10);

PL/SQL procedure successfully completed.

SQL> select employee_id,salary from employees where employee_id in(100,102,104,110);

EMPLOYEE_ID     SALARY                                                                                                                                                                                                                                                                                      
----------- ----------                                                                                                                                                                                                                                                                                      
        100    6536.22                                                                                                                                                                                                                                                                                      
        102    3478.46                                                                                                                                                                                                                                                                                      
        104     1507.2                                                                                                                                                                                                                                                                                      
        110   16778.45                                                                                                                                                                                                                                                                                      

SQL> desc num_table;
ERROR:
ORA-04043: object num_table does not exist 


SQL> CREATE TABLE num_table (n NUMBER);

Table created.

SQL> DECLARE
  2    TYPE num_list_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  3    v_nums num_list_type;
  4  BEGIN
  5   v_nums(1) := 1;
  6   v_nums(2) := 3;
  7   v_nums(3) := 5;
  8   v_nums(4) := 7;
  9   v_nums(5) := 11;
 10    FORALL i IN v_nums.FIRST .. v_nums.LAST
 11      INSERT INTO num_table (n) VALUES (v_nums(i));
 12    FOR i IN v_nums.FIRST .. v_nums.LAST
 13    LOOP
 14      dbms_output.put_line('Inserted ' ||
 15        SQL%BULK_ROWCOUNT(i) || ' row(s)'
 16        || ' on iteration ' || i);
 17    END LOOP;
 18  END;
 19  /
Inserted 1 row(s) on iteration 1                                                                                                                                                                                                                                                                            
Inserted 1 row(s) on iteration 2                                                                                                                                                                                                                                                                            
Inserted 1 row(s) on iteration 3                                                                                                                                                                                                                                                                            
Inserted 1 row(s) on iteration 4                                                                                                                                                                                                                                                                            
Inserted 1 row(s) on iteration 5                                                                                                                                                                                                                                                                            

PL/SQL procedure successfully completed.

SQL> truncate table num_table;

Table truncated.

SQL> DECLARE
  2    2    TYPE num_list_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  3    3    v_nums num_list_type;
  4    4  BEGIN
  5    5   v_nums(1) := 1;
  6    6   v_nums(2) := 3;
  7    7   v_nums(3) := 3;
  8    8   v_nums(4) := 7;
  9    9   v_nums(5) := 11;
 10   10    FORALL i IN v_nums.FIRST .. v_nums.LAST
 11   11      INSERT INTO num_table (n) VALUES (v_nums(i));
 12   12  EXCEPTION
 13   13  WHEN OTHERS THEN
 14   14    FOR i IN v_nums.FIRST .. v_nums.LAST
 15   15    LOOP
 16   16      dbms_output.put_line('Inserted ' ||
 17   17        SQL%BULK_ROWCOUNT(i) || ' row(s)'
 18   18        || ' on iteration ' || i);
 19   19    END LOOP;
 20   20* END;
 21  /
  2    TYPE num_list_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  *
ERROR at line 2:
ORA-06550: line 2, column 3: 
PLS-00103: Encountered the symbol "2" when expecting one of the following: 
begin function pragma procedure subtype type <an identifier> 
<a double-quoted delimited-identifier> current cursor delete 
exists prior 
The symbol "2" was ignored. 
ORA-06550: line 3, column 3: 
PLS-00103: Encountered the symbol "3" when expecting one of the following: 
begin function pragma procedure subtype type <an identifier> 
<a double-quoted delimited-identifier> current cursor delete 
exists prior 


SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2        TYPE num_list_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  3        v_nums num_list_type;
  4      BEGIN
  5       v_nums(1) := 1;
  6       v_nums(2) := 3;
  7       v_nums(3) := 3;
  8       v_nums(4) := 7;
  9       v_nums(5) := 11;
 10       FORALL i IN v_nums.FIRST .. v_nums.LAST
 11         INSERT INTO num_table (n) VALUES (v_nums(i));
 12     EXCEPTION
 13     WHEN OTHERS THEN
 14       FOR i IN v_nums.FIRST .. v_nums.LAST
 15       LOOP
 16         dbms_output.put_line('Inserted ' ||
 17           SQL%BULK_ROWCOUNT(i) || ' row(s)'
 18           || ' on iteration ' || i);
 19       END LOOP;
 20*   END;
SQL> /

PL/SQL procedure successfully completed.

SQL> set serveroutput on
SQL> /

PL/SQL procedure successfully completed.

SQL> select * from num_table;

         N                                                                                                                                                                                                                                                                                                  
----------                                                                                                                                                                                                                                                                                                  
         1                                                                                                                                                                                                                                                                                                  
         3                                                                                                                                                                                                                                                                                                  
         3                                                                                                                                                                                                                                                                                                  
         7                                                                                                                                                                                                                                                                                                  
        11                                                                                                                                                                                                                                                                                                  
         1                                                                                                                                                                                                                                                                                                  
         3                                                                                                                                                                                                                                                                                                  
         3                                                                                                                                                                                                                                                                                                  
         7                                                                                                                                                                                                                                                                                                  
        11                                                                                                                                                                                                                                                                                                  

10 rows selected.

SQL> truncate table num_table;

Table truncated.

SQL> desc num_table;
 Name                                                                                                                                                                          Null?    Type
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- -------- --------------------------------------------------------------------------------------------------------------------
 N                                                                                                                                                                                      NUMBER

SQL> alter table num_table add constraint pknum primary key(n);

Table altered.

SQL> DECLARE
  2        TYPE num_list_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  3        v_nums num_list_type;
  4      BEGIN
  5       v_nums(1) := 1;
  6       v_nums(2) := 3;
  7       v_nums(3) := 3;
  8       v_nums(4) := 7;
  9       v_nums(5) := 11;
 10       FORALL i IN v_nums.FIRST .. v_nums.LAST
 11         INSERT INTO num_table (n) VALUES (v_nums(i));
 12     EXCEPTION
 13     WHEN OTHERS THEN
 14       FOR i IN v_nums.FIRST .. v_nums.LAST
 15       LOOP
 16         dbms_output.put_line('Inserted ' ||
 17           SQL%BULK_ROWCOUNT(i) || ' row(s)'
 18           || ' on iteration ' || i);
 19       END LOOP;
 20    END;
 21  /
Inserted 1 row(s) on iteration 1                                                                                                                                                                                                                                                                            
Inserted 1 row(s) on iteration 2                                                                                                                                                                                                                                                                            
Inserted 0 row(s) on iteration 3                                                                                                                                                                                                                                                                            
Inserted 0 row(s) on iteration 4                                                                                                                                                                                                                                                                            
Inserted 0 row(s) on iteration 5                                                                                                                                                                                                                                                                            

PL/SQL procedure successfully completed.

SQL> CREATE OR REPLACE PROCEDURE get_departments(p_loc NUMBER) IS
  2    TYPE dept_tab_type IS
  3      TABLE OF departments%ROWTYPE;
  4    v_depts dept_tab_type;
  5  BEGIN
  6    SELECT * BULK COLLECT INTO v_depts
  7    FROM departments
  8    WHERE location_id = p_loc;
  9    FOR i IN 1 .. v_depts.COUNT LOOP
 10      DBMS_OUTPUT.PUT_LINE(v_depts(i).department_id
 11       ||' '|| v_depts(i).department_name);
 12    END LOOP;
 13  END;
 14  
 15  /

Procedure created.

SQL> execute get_departments(1700);
630 Unknown                                                                                                                                                                                                                                                                                                 
660 hr                                                                                                                                                                                                                                                                                                      
280 hr                                                                                                                                                                                                                                                                                                      
430 Unknown                                                                                                                                                                                                                                                                                                 
10 Administration                                                                                                                                                                                                                                                                                           
30 Purchasing                                                                                                                                                                                                                                                                                               
90 Executive                                                                                                                                                                                                                                                                                                
100 Finance                                                                                                                                                                                                                                                                                                 
110 Accounting                                                                                                                                                                                                                                                                                              
120 Treasury                                                                                                                                                                                                                                                                                                
130 Corporate Tax                                                                                                                                                                                                                                                                                           
140 Control And Credit                                                                                                                                                                                                                                                                                      
150 Shareholder Services                                                                                                                                                                                                                                                                                    
160 Benefits                                                                                                                                                                                                                                                                                                
170 Manufacturing                                                                                                                                                                                                                                                                                           
180 Construction                                                                                                                                                                                                                                                                                            
190 Contracting                                                                                                                                                                                                                                                                                             
200 Operations                                                                                                                                                                                                                                                                                              
210 IT Support                                                                                                                                                                                                                                                                                              
220 NOC                                                                                                                                                                                                                                                                                                     
230 IT Helpdesk                                                                                                                                                                                                                                                                                             
240 Government Sales                                                                                                                                                                                                                                                                                        
250 Retail Sales                                                                                                                                                                                                                                                                                            
260 Recruiting                                                                                                                                                                                                                                                                                              
270 Payroll                                                                                                                                                                                                                                                                                                 
370 Public relation                                                                                                                                                                                                                                                                                         
470 Public relation                                                                                                                                                                                                                                                                                         

PL/SQL procedure successfully completed.

SQL> exit
SQL> set lines 300
SQL> set pages 20
SQL> CREATE OR REPLACE PROCEDURE get_departments(p_loc NUMBER,p_nrows NUMBER) IS
  2    CURSOR dept_csr IS SELECT *
  3    FROM departments
  4    WHERE location_id = p_loc;
  5    TYPE dept_tabtype IS TABLE OF dept_csr%ROWTYPE;
  6    depts dept_tabtype;
  7  BEGIN
  8    OPEN dept_csr;
  9    FETCH dept_csr BULK COLLECT INTO depts LIMIT p_nrows;
 10    CLOSE dept_csr;
 11    DBMS_OUTPUT.PUT_LINE(depts.COUNT||' rows read');
 12  END;
 13  /

Procedure created.

SQL> execute get_departments(1700,5);

PL/SQL procedure successfully completed.

SQL> set serveroutput on
SQL> /

Procedure created.

SQL> execute get_departments(1700,5);
5 rows read                                                                                                                                                                                                                                                                                                 

PL/SQL procedure successfully completed.

SQL> execute get_departments(1700,10);
10 rows read                                                                                                                                                                                                                                                                                                

PL/SQL procedure successfully completed.

SQL> execute get_departments(1700,15);
15 rows read                                                                                                                                                                                                                                                                                                

PL/SQL procedure successfully completed.

SQL> execute get_departments(1700,20);
20 rows read                                                                                                                                                                                                                                                                                                

PL/SQL procedure successfully completed.

SQL> execute get_departments(1700,30);
27 rows read                                                                                                                                                                                                                                                                                                

PL/SQL procedure successfully completed.

SQL> select salary from employees where employee_id in(100,101,102,104);

    SALARY                                                                                                                                                                                                                                                                                                  
----------                                                                                                                                                                                                                                                                                                  
   6536.22                                                                                                                                                                                                                                                                                                  
   1452.68                                                                                                                                                                                                                                                                                                  
   3478.46                                                                                                                                                                                                                                                                                                  
    1507.2                                                                                                                                                                                                                                                                                                  

SQL> CREATE OR REPLACE PROCEDURE raise_salary(p_rate NUMBER) IS
  2     TYPE emplist_type IS TABLE OF NUMBER;
  3     TYPE numlist_type IS TABLE OF employees.salary%TYPE
  4       INDEX BY BINARY_INTEGER;
  5     v_emp_ids  emplist_type := emplist_type(100,101,102,104);
  6     v_new_sals numlist_type;
  7  BEGIN
  8    FORALL i IN v_emp_ids.FIRST .. v_emp_ids.LAST
  9      UPDATE employees
 10        SET commission_pct = p_rate * salary
 11      WHERE employee_id = v_emp_ids(i)
 12      RETURNING salary BULK COLLECT INTO v_new_sals;
 13    FOR i IN 1 .. v_new_sals.COUNT LOOP
 14      DBMS_OUTPUT.PUT_LINE(v_new_sals(i));
 15    END LOOP;
 16  END;
 17  /

Procedure created.

SQL> execute raise_salary(10);
BEGIN raise_salary(10); END;

*
ERROR at line 1:
ORA-01438: value larger than specified precision allowed for this column 
ORA-06512: at "HR.RAISE_SALARY", line 8 
ORA-06512: at line 1 


SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE raise_salary(p_rate NUMBER) IS
  2     TYPE emplist_type IS TABLE OF NUMBER;
  3     TYPE numlist_type IS TABLE OF employees.salary%TYPE
  4       INDEX BY BINARY_INTEGER;
  5     v_emp_ids  emplist_type := emplist_type(100,101,102,104);
  6     v_new_sals numlist_type;
  7  BEGIN
  8    FORALL i IN v_emp_ids.FIRST .. v_emp_ids.LAST
  9      UPDATE employees
 10        SET salary = p_rate * salary
 11      WHERE employee_id = v_emp_ids(i)
 12      RETURNING salary BULK COLLECT INTO v_new_sals;
 13    FOR i IN 1 .. v_new_sals.COUNT LOOP
 14      DBMS_OUTPUT.PUT_LINE(v_new_sals(i));
 15    END LOOP;
 16* END;
SQL> /

Procedure created.

SQL> execute raise_salary(10);
65362.2                                                                                                                                                                                                                                                                                                     
14526.8                                                                                                                                                                                                                                                                                                     
34784.6                                                                                                                                                                                                                                                                                                     
15072                                                                                                                                                                                                                                                                                                       

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    2    TYPE t_emp_tab IS TABLE OF emp%ROWTYPE;
  3    3
  4    4    l_tab  t_emp_tab := t_emp_tab();
  5    5  BEGIN
  6    6    FOR i IN 1 .. 1000 LOOP
  7    7      l_tab.extend;
  8    8
  9    9      l_tab(l_tab.last).employee_id          := i;
 10   10      l_tab(l_tab.last).last_name        := TO_CHAR(i);
 11   11      l_tab(l_tab.last).first_name := 'Description: ' || TO_CHAR(i);
 12   12    END LOOP;
 13   13  end;
 14  /
  2    TYPE t_emp_tab IS TABLE OF emp%ROWTYPE;
  *
ERROR at line 2:
ORA-06550: line 2, column 3: 
PLS-00103: Encountered the symbol "2" when expecting one of the following: 
begin function pragma procedure subtype type <an identifier> 
<a double-quoted delimited-identifier> current cursor delete 
exists prior 
The symbol "2" was ignored. 
ORA-06550: line 3, column 3: 
PLS-00103: Encountered the symbol "3" when expecting one of the following: 
begin function pragma procedure subtype type <an identifier> 
<a double-quoted delimited-identifier> current cursor delete 
exists prior 


SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2        TYPE t_emp_tab IS TABLE OF emp%ROWTYPE;
  3        l_tab  t_emp_tab := t_emp_tab();
  4      BEGIN
  5        FOR i IN 1 .. 1000 LOOP
  6          l_tab.extend;
  7          l_tab(l_tab.last).employee_id          := i;
  8         l_tab(l_tab.last).last_name        := TO_CHAR(i);
  9         l_tab(l_tab.last).first_name := 'Description: ' || TO_CHAR(i);
 10       END LOOP;
 11*    end;
 12  /

PL/SQL procedure successfully completed.

SQL> spool off
